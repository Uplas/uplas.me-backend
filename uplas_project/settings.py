"""
Django settings for uplas_project project.

Generated by 'django-admin startproject' using Django 4.2.x.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from django.utils.translation import gettext_lazy as _
import dotenv # For loading .env file in development

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Environment Variable Setup ---
# Load .env file in development if it exists
# In production, environment variables should be set directly in the environment (e.g., GCP App Engine, Cloud Run)
DOTENV_PATH = BASE_DIR / '.env'
if os.path.exists(DOTENV_PATH):
    dotenv.load_dotenv(DOTENV_PATH)

# --- Core Django Settings ---
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-for-dev') # Fallback for dev

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG should be 'False' in production. Set via environment variable.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]
# Example for production: 'yourdomain.com,api.yourdomain.com'

CSRF_TRUSTED_ORIGINS_STRING = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STRING.split(',') if origin.strip()]
# Example for production: 'https://yourdomain.com,https://api.yourdomain.com'


# --- Application Definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist', # For token blacklisting on logout/rotation
    'corsheaders',
    'django_filters', # For filtering in DRF
    # 'storages', # For django-storages (GCS backend) - uncomment when GS_BUCKET_NAME is set

    # Your apps (ensure 'apps.' prefix is consistent with your project structure)
    'apps.core.apps.CoreConfig', # Using AppConfig for better naming and ready() method
    'apps.users.apps.UsersConfig',
    'apps.courses.apps.CoursesConfig',
    'apps.payments.apps.PaymentsConfig',
    'apps.projects.apps.ProjectsConfig',
    'apps.community.apps.CommunityConfig',
    'apps.blog.apps.BlogConfig',
    # 'apps.ai_agents.apps.AiAgentsConfig', # Add if you have a dedicated ai_agents app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware', # CORS middleware - place high, before CommonMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware', # For internationalization, place after Session and before Common
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'uplas_project.urls' # Main project urls.py

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Project-level templates if any
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uplas_project.wsgi.application'
ASGI_APPLICATION = 'uplas_project.asgi.application' # If using ASGI for Channels, etc.


# --- Database ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Configured for Cloud SQL for MySQL using environment variables.
DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.mysql')
DB_NAME = os.environ.get('DB_NAME', 'uplas_dev_db') # Default for local dev
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST = os.environ.get('DB_HOST') # For Cloud SQL Proxy: 127.0.0.1. For direct connection (e.g. Cloud Run to Cloud SQL): Cloud SQL instance connection name or private IP.
DB_PORT = os.environ.get('DB_PORT', '3306')

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
            # Add SSL options if connecting directly to Cloud SQL without proxy and require SSL
            # 'ssl': {
            #     'ca': os.environ.get('DB_SSL_CA_PATH'),
            #     'cert': os.environ.get('DB_SSL_CERT_PATH'),
            #     'key': os.environ.get('DB_SSL_KEY_PATH'),
            # }
        },
    }
}
# For Cloud SQL connection from Cloud Run/Functions, use the instance connection name for HOST
# if not using the Cloud SQL Proxy. Example: 'your-gcp-project:your-region:your-instance'
# If using Cloud SQL Proxy, HOST is typically '127.0.0.1' and PORT is the proxy port.
# In development, if using SQLite:
# if DEBUG and not all([DB_NAME, DB_USER, DB_PASSWORD, DB_HOST]):
#     print("WARNING: Database environment variables not fully set. Falling back to SQLite for local development.")
#     DATABASES['default'] = {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }


# --- Password Validation ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalization & Localization ---
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = os.environ.get('DJANGO_LANGUAGE_CODE', 'en-us') # Default language
LANGUAGES = [ # Define available languages for your platform
    ('en', _('English')),
    ('es', _('Spanish')), # Match with frontend: locales/es.json
    ('fr', _('French')),  # Match with frontend: locales/fr.json
    # Add other languages your platform supports
]
LOCALE_PATHS = [BASE_DIR / 'locale'] # Directory for translation files (.po, .mo)
TIME_ZONE = os.environ.get('DJANGO_TIME_ZONE', 'Africa/Nairobi') # Your primary timezone
USE_I18N = True  # Enable internationalization
USE_L10N = True  # DEPRECATED in Django 5.0, use USE_TZ and formatting libraries instead. Kept for Django 4.2.
USE_TZ = True    # Enable timezone-aware datetimes (highly recommended)


# --- Static files (CSS, JavaScript, Images) & Media Files (User Uploads) ---
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# https://docs.djangoproject.com/en/4.2/ref/settings/#std-setting-STORAGES (Django 4.2+)

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

if DEBUG:
    # Development: serve static files with Django's staticfiles, media with runserver
    STATICFILES_DIRS = [BASE_DIR / 'static'] # For finding static files during development
    STATIC_ROOT = BASE_DIR / 'staticfiles_collected' # For collectstatic in dev (optional, more for prod prep)
    MEDIA_ROOT = BASE_DIR / 'mediafiles'
    # Ensure 'storages' is NOT in INSTALLED_APPS if GS_BUCKET_NAME is not set in dev
else:
    # Production: Use Google Cloud Storage (django-storages)
    GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
    if GS_BUCKET_NAME:
        if 'storages' not in INSTALLED_APPS: # Dynamically add if configured
            INSTALLED_APPS.append('storages')

        STORAGES = {
            "default": { # For media files
                "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
                "OPTIONS": {
                    "bucket_name": GS_BUCKET_NAME,
                    "default_acl": "publicRead", # Or "projectPrivate" and serve via signed URLs or CDN
                    "file_overwrite": False, # Important for media files
                    "location": "media", # Subdirectory in the bucket for media
                },
            },
            "staticfiles": { # For static files
                "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
                "OPTIONS": {
                    "bucket_name": GS_BUCKET_NAME,
                    "default_acl": "publicRead",
                    "location": "static", # Subdirectory in the bucket for static
                },
            },
        }
        # STATIC_URL and MEDIA_URL are automatically constructed by django-storages
        # based on bucket name and location if using GoogleCloudStorage.
        # However, you can explicitly set them if needed for CDN or custom domain.
        STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
        MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
        # STATIC_ROOT and MEDIA_ROOT are not used by django-storages in the same way as local storage.
        # `collectstatic` will upload to the GCS bucket.
    else:
        # Fallback for production if GCS is not configured (not recommended for production)
        print("WARNING: GS_BUCKET_NAME not set for production. Static/Media files might not be served correctly.")
        STATIC_ROOT = BASE_DIR / 'staticfiles_collected'
        MEDIA_ROOT = BASE_DIR / 'mediafiles'


# --- Default primary key field type ---
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- Custom User Model ---
AUTH_USER_MODEL = 'users.User'


# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # Add SessionAuthentication if you also use Django admin or browsable API with sessions
        # 'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        # More restrictive default, override per view if needed
        'rest_framework.permissions.IsAuthenticated',
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly', # Original default
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': os.environ.get('DRF_PAGE_SIZE', 10), # Default 10, configurable
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    # Add other defaults like RENDERER_CLASSES, PARSER_CLASSES if needed
    # 'DEFAULT_RENDERER_CLASSES': [
    #     'rest_framework.renderers.JSONRenderer',
    #     'rest_framework.renderers.BrowsableAPIRenderer', # For browsable API in dev
    # ],
}
if DEBUG: # Add BrowsableAPIRenderer only in DEBUG
    REST_FRAMEWORK.setdefault('DEFAULT_RENDERER_CLASSES', []).append('rest_framework.renderers.BrowsableAPIRenderer')
    REST_FRAMEWORK.setdefault('DEFAULT_RENDERER_CLASSES', []).insert(0, 'rest_framework.renderers.JSONRenderer')


# --- Simple JWT Settings ---
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.environ.get('JWT_ACCESS_TOKEN_LIFETIME_MINUTES', 60))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.environ.get('JWT_REFRESH_TOKEN_LIFETIME_DAYS', 7))),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True, # Requires 'rest_framework_simplejwt.token_blacklist' in INSTALLED_APPS
    'UPDATE_LAST_LOGIN': True, # Updates user's last_login field on token refresh

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses Django's SECRET_KEY by default
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Standard "Bearer <token>"
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id', # From your User model
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    # 'SLIDI
