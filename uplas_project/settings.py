# uplas_project/settings.py
"""
Django settings for uplas_project project.

Generated by 'django-admin startproject' using Django 4.2.x.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from django.utils.translation import gettext_lazy as _
import dotenv # For loading .env file in development

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Environment Variable Setup ---
# Load .env file in development if it exists
# In production, environment variables should be set directly in the environment (e.g., GCP App Engine, Cloud Run)
DOTENV_PATH = BASE_DIR / '.env'
if os.path.exists(DOTENV_PATH):
    dotenv.load_dotenv(DOTENV_PATH)

# --- Core Django Settings ---
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-for-dev') # Fallback for dev
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',') if host.strip()]

CSRF_TRUSTED_ORIGINS_STRING = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:8000,http://127.0.0.1:8000') # Added backend dev port
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STRING.split(',') if origin.strip()]


# --- Application Definition ---
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_filters',
    # 'storages', # Conditionally added later if GS_BUCKET_NAME is set

    # Your apps
    'apps.core.apps.CoreConfig',
    'apps.users.apps.UsersConfig',
    'apps.courses.apps.CoursesConfig',
    'apps.payments.apps.PaymentsConfig',
    'apps.projects.apps.ProjectsConfig',
    'apps.community.apps.CommunityConfig',
    'apps.blog.apps.BlogConfig',
    'apps.ai_agents.apps.AiAgentsConfig', # Assuming you will create this app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'uplas_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uplas_project.wsgi.application'
ASGI_APPLICATION = 'uplas_project.asgi.application'


# --- Database ---
DB_ENGINE = os.environ.get('DB_ENGINE', 'django.db.backends.mysql')
DB_NAME = os.environ.get('DB_NAME', 'uplas_dev_db')
DB_USER = os.environ.get('DB_USER', 'root') # Common default for local MySQL
DB_PASSWORD = os.environ.get('DB_PASSWORD', '') # Common default for local MySQL
DB_HOST = os.environ.get('DB_HOST', '127.0.0.1') # For Cloud SQL Proxy or local
DB_PORT = os.environ.get('DB_PORT', '3306')

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}

# If using Cloud SQL Auth Proxy, the above is fine.
# For direct connections from App Engine Standard to Cloud SQL (same region):
# if not DEBUG and 'google.cloud.sql.connector' not in sys.modules and os.getenv("INSTANCE_CONNECTION_NAME"):
#    DATABASES['default']['HOST'] = f'/cloudsql/{os.getenv("INSTANCE_CONNECTION_NAME")}'

# --- Password Validation ---
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# --- Internationalization & Localization ---
LANGUAGE_CODE = os.environ.get('DJANGO_LANGUAGE_CODE', 'en-us')
LANGUAGES = [
    ('en', _('English')),
    ('es', _('Spanish')),
    ('fr', _('French')),
]
LOCALE_PATHS = [BASE_DIR / 'locale']
TIME_ZONE = os.environ.get('DJANGO_TIME_ZONE', 'Africa/Nairobi')
USE_I18N = True
USE_L10N = True # Django 4.x
USE_TZ = True

# --- Static files (CSS, JavaScript, Images) & Media Files (User Uploads) ---
STATIC_URL = '/static/'
MEDIA_URL = '/media/'

if DEBUG:
    STATICFILES_DIRS = [BASE_DIR / 'static_dev'] # Renamed to avoid conflict if you have 'static' in root
    STATIC_ROOT = BASE_DIR / 'staticfiles_collected_dev'
    MEDIA_ROOT = BASE_DIR / 'mediafiles_dev'
else:
    GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
    if GS_BUCKET_NAME:
        if 'storages' not in INSTALLED_APPS:
            INSTALLED_APPS.append('storages')

        STORAGES = {
            "default": { # For media files
                "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
                "OPTIONS": {
                    "bucket_name": GS_BUCKET_NAME,
                    "default_acl": "publicRead",
                    "file_overwrite": False,
                    "location": "media",
                },
            },
            "staticfiles": { # For static files
                "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
                "OPTIONS": {
                    "bucket_name": GS_BUCKET_NAME,
                    "default_acl": "publicRead",
                    "location": "static",
                },
            },
        }
        STATIC_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/static/'
        MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
    else:
        print("PRODUCTION WARNING: GS_BUCKET_NAME not set. Static/Media files might not be served correctly from GCS.")
        STATIC_ROOT = BASE_DIR / 'staticfiles_collected_prod'
        MEDIA_ROOT = BASE_DIR / 'mediafiles_prod'

# --- Default primary key field type ---
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --- Custom User Model ---
AUTH_USER_MODEL = 'users.User'

# --- Django REST Framework Settings ---
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.SessionAuthentication', # If using browsable API with login
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # More common default
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': int(os.environ.get('DRF_PAGE_SIZE', 10)),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}
if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append('rest_framework.renderers.BrowsableAPIRenderer')

# --- Simple JWT Settings ---
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.environ.get('JWT_ACCESS_TOKEN_LIFETIME_MINUTES', 60))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.environ.get('JWT_REFRESH_TOKEN_LIFETIME_DAYS', 7))),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# --- CORS Settings ---
CORS_ALLOW_ALL_ORIGINS = DEBUG # Allow all origins in development
CORS_ALLOWED_ORIGINS = [
    origin.strip() for origin in os.environ.get('DJANGO_CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000').split(',') if origin.strip()
]
# Consider True if your frontend and backend are on the same site for cookies
CORS_ALLOW_CREDENTIALS = True # If your frontend needs to send cookies (e.g., for CSRF with SessionAuth)

# --- Email Backend Configuration ---
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # Prints emails to console in dev
else:
    EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
    EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST')
    EMAIL_PORT = int(os.environ.get('DJANGO_EMAIL_PORT', 587))
    EMAIL_USE_TLS = os.environ.get('DJANGO_EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = os.environ.get('DJANGO_DEFAULT_FROM_EMAIL', 'noreply@uplas.me')

# --- Logging Configuration ---
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        # Add file handler or cloud logging handler for production
        # 'cloud_logging': {
        #     'class': 'google.cloud.logging.handlers.CloudLoggingHandler',
        #     'client': google.cloud.logging.Client(), # Requires google-cloud-logging
        #     'formatter': 'verbose',
        # }
    },
    'root': {
        'handlers': ['console'], # Add 'cloud_logging' in production
        'level': 'INFO', # Adjust level as needed (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    },
    'loggers': {
        'django': {
            'handlers': ['console'], # Add 'cloud_logging' in production
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}


# --- Custom Application Settings ---
SITE_NAME = "UPLAS Platform"
DEFAULT_CURRENCY = 'USD'
CURRENCY_CHOICES = [
    ('USD', _('US Dollar')),
    ('EUR', _('Euro')),
    ('KES', _('Kenyan Shilling')),
    # Add other currencies as needed
]
WHATSAPP_CODE_EXPIRY_MINUTES = int(os.environ.get('WHATSAPP_CODE_EXPIRY_MINUTES', 10))

# --- Stripe Settings ---
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = os.environ.get('STRIPE_WEBHOOK_SECRET')

# --- Celery Configuration (if using for background tasks) ---
# CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://localhost:6379/0')
# CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://localhost:6379/0')
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_RESULT_SERIALIZER = 'json'
# CELERY_TIMEZONE = TIME_ZONE

# Ensure 'storages' app is correctly managed based on GS_BUCKET_NAME
if not DEBUG and GS_BUCKET_NAME and 'storages' not in INSTALLED_APPS:
    INSTALLED_APPS.append('storages')
elif (DEBUG or not GS_BUCKET_NAME) and 'storages' in INSTALLED_APPS:
    INSTALLED_APPS.remove('storages')


# --- Security settings for Production (if not DEBUG) ---
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = os.environ.get('DJANGO_SECURE_SSL_REDIRECT', 'True').lower() == 'true'
    SESSION_COOKIE_SECURE = os.environ.get('DJANGO_SESSION_COOKIE_SECURE', 'True').lower() == 'true'
    CSRF_COOKIE_SECURE = os.environ.get('DJANGO_CSRF_COOKIE_SECURE', 'True').lower() == 'true'
    # HSTS settings - be careful when enabling these
    # SECURE_HSTS_SECONDS = 31536000 # 1 year
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True
    # SECURE_CONTENT_TYPE_NOSNIFF = True
    # SECURE_BROWSER_XSS_FILTER = True # Deprecated in modern browsers, use Content-Security-Policy
    # X_FRAME_OPTIONS = 'DENY'
