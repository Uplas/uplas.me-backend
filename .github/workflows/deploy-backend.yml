# Create the corrected deploy-backend.yml
cat > .github/workflows/deploy-backend.yml << 'EOF'
name: Deploy Uplas Backend to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggers

env:
  PROJECT_ID: 'cs-poc-w8pykuyg0mptchb3jfkuhbw'
  GCP_REGION: 'us-central1'
  SERVICE_ACCOUNT_EMAIL: 'github-actions-deployer@cs-poc-w8pykuyg0mptchb3jfkuhbw.iam.gserviceaccount.com'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/772221283576/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
  ARTIFACT_REGISTRY_REPO: 'uplas-images'
  CLOUD_RUN_SERVICE_NAME: 'uplas-me-backend-service'
  IMAGE_NAME: 'uplas.me-backend'
  CLOUD_SQL_INSTANCE: 'cs-poc-w8pykuyg0mptchb3jfkuhbw:us-central1:uplas-mysql-instance' # Update with your actual instance name

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker to use gcloud as credential helper
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Push Docker image
        run: |
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Deploy to Cloud Run
        id: deploy_service
        run: |
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --cpu-boost \
            --no-cpu-throttling \
            --min-instances=1 \
            --max-instances=3 \
            --memory=2Gi \
            --cpu=2 \
            --timeout=3600 \
            --set-cloudsql-instances=${{ env.CLOUD_SQL_INSTANCE }} \
            --update-secrets=DJANGO_PROD_SECRET_KEY=DJANGO_PROD_SECRET_KEY:latest,DJANGO_PROD_ALLOWED_HOSTS=DJANGO_PROD_ALLOWED_HOSTS:latest,PROD_DB_NAME=PROD_DB_NAME:latest,PROD_DB_USER=PROD_DB_USER:latest,PROD_DB_PASSWORD=PROD_DB_PASSWORD:latest,INSTANCE_CONNECTION_NAME=INSTANCE_CONNECTION_NAME:latest,GS_PROD_BUCKET_NAME=GS_PROD_BUCKET_NAME:latest,STRIPE_PROD_SECRET_KEY=STRIPE_PROD_SECRET_KEY:latest,STRIPE_WEBHOOK_SECRET=STRIPE_WEBHOOK_SECRET:latest,AI_NLP_TUTOR_SERVICE_URL=AI_NLP_TUTOR_SERVICE_URL:latest,AI_TTS_SERVICE_URL=AI_TTS_SERVICE_URL:latest,AI_TTV_SERVICE_URL=AI_TTV_SERVICE_URL:latest,AI_PROJECT_GENERATOR_SERVICE_URL=AI_PROJECT_GENERATOR_SERVICE_URL:latest,AI_PROJECT_ASSESSMENT_SERVICE_URL=AI_PROJECT_ASSESSMENT_SERVICE_URL:latest,AI_SERVICE_API_KEY=AI_SERVICE_API_KEY:latest \
            --update-env-vars=DJANGO_SETTINGS_MODULE=uplas_project.settings,DJANGO_DEBUG=False,DB_ENGINE=django.db.backends.mysql,GS_IS_PUBLIC=False \
            --port=8080

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUD_RUN_SERVICE_NAME }} --region=${{ env.GCP_REGION }} --format='value(status.url)')
          echo "Service deployed to: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Show Deployment Status
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Service URL: $SERVICE_URL"
          echo "üì¶ Image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
EOF